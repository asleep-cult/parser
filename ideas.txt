A compiled language that includes the benefits of interpreted languages.
The compilation process is as follows Source -> Tokens -> AST -> Bytecode ->
Machine Code.

Braces are used to define blocks, named blocks can be overloaded
in their scope. Example:

```
function namedBlock() {
        try {
                doSomething()
        }
        catch;
}
```
The example above is equivalent to `catch {}`, the block is optional.

Qualifiers are used to change the meaning of something, some built-in block
qualifiers are function, class, interface, compconst and overridden. Some
built-in type qualifiers are immutable, ...? .

Block guards essentially guard a block from being fully created until the
block is initiated, this is useful for generics. Example:

```
class GuardedBlock<T: Type>
{

}

T = GuardedBlock<Int>
```

The `@` symbol is a request directly to the compiler, Example: `@import("foo")`

Ideologies:
Readability matters but not enough to impact performance.
Built-ins should never be treated as special cases meaning overloadability is important but unexpected behavior is bad.
Undefined behavior can be hard to debug, exceptions exist for a reason.
High level interfaces should always be provided but restriction of low level interfaces is unacceptable.
The standard is preferred until it's not so reinventing the wheel is okay.
