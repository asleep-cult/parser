statically typed or dynamically typed?

I'd like this "language" to be statically typed but I'd like to provide
an interface to dynamic types through an Object type. Objects will be
compatible with all operators and are assumed to have all properties but
this can only be proven at runtime.

compiled or interpreted?

There will be multiple implementations but the end goal is for the
"official" implementation to use a JIT compiler, an interpreted implementation
will likely come first.

garbage collection?

This "language" will use a mark-sweep-compact garbage collection algorithm,
everything will be allocated on a heap and referenced by the stack. All objects
on the heap will have a bit determining if it's unreachable, the runtime will
search the stack for all objects on the heap and mark the unreachable bit
if it wasn't found. The runtime will then sweep the heap of unreachable
objects and compact the heap so that there aren't gaps where live objects
once lived (live objects on top free space on the bottom).

basic syntax?

The idea is named blocks of code that can be decorated with block decorators

```
function namedBlock(int x) void {
        Integer foo = 9;
}
```

here function is the block decorator

```
struct NamedBlock {
        Integer foo;
}
```

here struct is the block decorator

```
private class NamedBlock {
}
```

here there a multiple block decorators... private and class.
These aren't keywords... just built-in decorators :^)
